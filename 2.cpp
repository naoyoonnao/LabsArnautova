#include <iostream>
#include <cmath> // Для математичних функцій, таких як pow, log10, sqrt, fabs
#include <ctime> // Для ініціалізації генератора випадкових чисел

using namespace std;

int main()
{
    srand(time(0)); // Ініціалізація генератора випадкових чисел поточним часом

    // Завдання 2 - 7: Обчислення значень z і y для масиву b
    double hx = 0.2, e = 2.72, E = 0.0001, z, y;
    int b[4] = { 2, 4, 6, 8 }; // Масив b із чотирма значеннями

    for (double x = 1; x + E <= 2; x += hx) // Цикл по x від 1 до 2 із кроком hx
        for (int i = 0; i < 4; i++) // Прохід по кожному елементу масиву b
        {
            z = (sqrt(4 * b[i] + pow(x, 2))) / 2; // Обчислення z
            y = pow(e, (x / 2)) * pow(b[i], x) * (cos(z) + sin(z)); // Обчислення y

            // Вивід результатів для кожного значення b та x
            cout << "b = " << b[i] << endl;
            cout << "x = " << x << endl;
            cout << "z = " << z << endl;
            cout << "y = " << y << endl;
            cout << endl;
        }

    // Робота з матрицею: створення, обробка та виведення
    int n = 5; // Розмір матриці (5x5)
    int** arr = new int*[n]; // Динамічне виділення пам'яті для масиву вказівників

    for (int i = 0; i < n; i++) // Виділення пам'яті для кожного рядка матриці
        arr[i] = new int[n];

    // Заповнення матриці випадковими числами від -10 до 10
    for (int i = 0; i < n; i++, cout << endl)
        for (int j = 0; j < n; j++)
        {
            arr[i][j] = rand() % 21 - 10; // Генерація випадкового числа
            cout << arr[i][j] << "\t"; // Вивід елемента матриці
        }
    cout << endl;

    // Обчислення добутку елементів другої (побічної) діагоналі
    int dob = 1;
    for (int i = 0; i < n; i++)
        dob = dob * arr[i][n - i - 1]; // Множення елементів побічної діагоналі
    cout << dob << endl;

    // Сортування другого рядка матриці
    for (int k = 0; k < n - 1; k++) // Кількість ітерацій для сортування
        for (int i = 0; i < n - 1 - k; i++) // Порівняння сусідніх елементів
        {
            if (arr[1][i + 1] < arr[1][i]) // Якщо наступний елемент менший
            {
                int c = arr[1][i + 1]; // Міняємо місцями елементи
                arr[1][i + 1] = arr[1][i];
                arr[1][i] = c;
            }
        }

    // Вивід матриці після сортування другого рядка
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            cout << arr[i][j] << "\t";
        }
        cout << endl;
    }

    // Знаходження мінімального та максимального елементів матриці
    int count = 0, res = 0, min = arr[0][0], max = arr[0][0];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (arr[i][j] > max) // Оновлення максимуму
                max = arr[i][j];
            if (arr[i][j] < min) // Оновлення мінімуму
                min = arr[i][j];
        }
    }

    // Розрахунок відношення максимуму до мінімуму
    res = max / min;

    // Підрахунок кількості елементів, які більші за res у парних рядках
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i % 2 == 0) { // Перевірка, чи рядок парний
                if (arr[i][j] > res) // Якщо елемент більший за res
                    count++;
            }
        }
    }

    // Вивід кількості таких елементів
    cout << endl << count << endl;

    // Видалення динамічно виділеної пам'яті
    for (int i = 0; i < n; i++)
        delete[] arr[i];
    delete[] arr;

    return 0; // Завершення програми
}
